"""
This module offers an interactive repl to run a Workflow.
"""
import json
import ast
from pprint import pprint
from typing import List, Dict, Any, Optional, Tuple

from prompt_toolkit import prompt
from [[python_package_import_name]].src.controller.prediction import predict_wrapper
from [[python_package_import_name]].utils.logger import log
from [[python_package_import_name]] import constants as const


[% raw %]
def make_alts_from_text(text: str) -> Tuple[List[List[Dict[str, Any]]], Optional[str]]:
    """
    [summary]

    Args:
        text (str): [description]

    Returns:
        List[Dict[str, Any]]: [description]
    """
    return [[{const.TRANSCRIPT: text.strip(), const.CONFIDENCE: None}]], None


def parse_as(text: str, func) -> Tuple[Optional[List[List[Dict[str, Any]]]], Optional[str]]:
    """
    Parse text as Dict either expecting json, or python object.

    Args:
        text (str): Raw user input.
        func (function): One of `json.loads`, `ast.literal_eval`.

    Returns:
        Optional[Dict[str, Any]]: Predict API compatible data structure.
    """
    try:
        content = func(text)
        if isinstance(content, list):
            return content, None
        elif isinstance(content, dict):
            return content[const.ALTERNATIVES], content[const.CONTEXT]
        else:
            return None, None
    except json.JSONDecodeError:
        return None, None
    except ValueError:
        return None, None
    except SyntaxError:
        return None, None


def repl_prompt(separator="", show_help=True):
    message = """
    Provide either a json like:\n

    ```
    {
        "alternatives": [[{"transcript": "...", "confidence": "..."}]],
        "context": {}
    }
    ```

    or 

    ```
    [[{"transcript": "...", "confidence": "..."}]]
    ```

    or just plain-text: "This sentence gets converted to above internally!"

Input interactions:

- ESC-ENTER to submit
- C-c or C-d to exit (C = Ctrl)
    """
    message = message.strip()
    return f"{message}\n{separator}\nEnter>\n" if show_help else "Enter>\n"


def repl() -> None:
    separator = "-" * 100
    show_help = True
    log.info("Loading models... this takes around 20s.")
    predict = predict_wrapper()
    try:
        while True:
            raw = prompt(repl_prompt(separator=separator, show_help=show_help), multiline=True)

            if raw == "--help":
                raw = prompt(repl_prompt(separator=separator, show_help=True), multiline=True)            

            show_help = False
            utterance, context = parse_as(raw, json.loads)
            if not utterance:
                utterance, context = parse_as(raw, ast.literal_eval)
            if not utterance:
                utterance, context = make_alts_from_text(raw)

            log.info("utterance")
            pprint(utterance)
            log.info("context: %s ", context)

            response = predict(utterance, context)
            log.info("response")
            pprint(response)
    except KeyboardInterrupt:
        log.info("Exiting...")
    except EOFError:
        log.info("Exiting...")

[% endraw %]