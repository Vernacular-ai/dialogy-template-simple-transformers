"""
This module provides a simple interface to provide text features
and receive Intent and Entities.
"""
from typing import Any, List, Dict, Optional

import attr
from dialogy.preprocess.text.normalize_utterance import normalize
[% if use_ner or use_duckling %]
from dialogy.postprocess.text.slot_filler.rule_slot_filler import (
    RuleBasedSlotFillerPlugin,
)
[% endif %]
[% if intent_classification_flavor == 2 %]
from dialogy.postprocess.text.voting.intent import VotePlugin
[% endif %]
[% if intent_classification_flavor == 1 %]
from dialogy.preprocess.text.merge_asr_output import merge_asr_output_plugin
[% endif %]
[% if use_duckling %]
from dialogy.parser.text.entity.duckling_parser import DucklingParser
[% endif %]

from [[python_package_import_name]] import constants as const
from [[python_package_import_name]].utils.config import Config
from [[python_package_import_name]].src.workflow.workflow import XLMRWorkflow

config = Config()

[% if use_ner or use_duckling %]
slot_filler = RuleBasedSlotFillerPlugin(
    rules=config.rules[const.SLOTS], access=lambda w: w.output
)()
[% endif %]

[% if intent_classification_flavor == 2 %]
def update_intent(workflow, value):
    _, entities = workflow.output
    workflow.output = (value, entities)

vote_plugin = VotePlugin(
    fallback_intent=const.S_INTENT_OOS,
    access=lambda w: (w.output[0], len(w.input[const.S_CLASSIFICATION_INPUT])),
    mutate=update_intent,
)()
[% else %]
def update_input(w: XLMRWorkflow, value: str) -> None:
    w.input[const.S_CLASSIFICATION_INPUT] = value

merge_asr_output = merge_asr_output_plugin(access=lambda w: w.input[const.S_CLASSIFICATION_INPUT], mutate=update_input)
[% endif %]

[% if use_duckling %]
def update_entities(workflow, entities):
    workflow.output = (None, entities)

duckling_parser = DucklingParser(access=lambda w: (w.input[const.S_CLASSIFICATION_INPUT], w.input[const.S_REFERENCE_TIME]), 
    mutate=update_entities, 
    dimensions=["number"], 
    locale="en_IN")()
[% endif %]


def predict_wrapper():
    """
    Create a closure for the predict function.

    Ensures that the workflow is loaded just once without creating global variables for it.
    This can also be made into a class if needed.
    """
    preprocessors = [
        [% if intent_classification_flavor == 1 %]
        merge_asr_output,
        [% endif %] 
        [% if use_duckling %]
        duckling_parser,
        [% endif %]
    ]
    postprocessors = [
        [% if intent_classification_flavor == 2 %]
        vote_plugin,
        [% endif %] 
        [% if use_ner or use_duckling %]
        slot_filler 
        # slot_filler should always be the last plugin.
        # If you add entities afterwards, they wont fill intent slots.
        [% endif %]
    ]

    workflow = XLMRWorkflow(
        preprocessors=preprocessors,
        postprocessors=postprocessors,
    )
    def predict(utterance: List[str], context: Dict[str, Any], locale: str, intents_info: Optional[List[Dict[str, Any]]=None, reference_time: Optional[int] = None):
        """
        Produce intent and entities for a given utterance.

        The second argument is context. Use it when available, it is
        a good practice to use it for modeling.
        """
        utterance = normalize(utterance)
        [% if use_duckling %]
        intent, entities = workflow.run({const.S_CLASSIFICATION_INPUT: utterance, const.S_REFERENCE_TIME: reference_time, const.S_CONTEXT: context, const.LOCALE: locale })
        [% elif use_ner %]
        intent, entities = workflow.run({const.S_CLASSIFICATION_INPUT: utterance, const.S_NER_INPUT: utterance})
        [% else %]
        intent, entities = workflow.run({const.S_CLASSIFICATION_INPUT: utterance})
        [% endif %]

        intent = attr.asdict(intent)

        [% if use_ner or use_duckling %]
        slots = []

        for slot_name, slot_values in intent[const.SLOTS].items():
            slot_values[const.NAME] = slot_name
            slots.append(slot_values)

        intent[const.SLOTS] = slots
        [% endif %]

        return {
            const.VERSION: config.version,
            const.INTENTS: [intent],
            const.ENTITIES: [attr.asdict(entity) for entity in entities],
        }

    return predict
