import traceback
from typing import Any, List, Dict

import attr
from flask import jsonify, request
from dialogy.types.intent import Intent

from [[python_package_import_name]] import constants as const
from [[python_package_import_name]].src.api import app
from [[python_package_import_name]].src.controller.prediction import predict_wrapper
from [[python_package_import_name]].utils.sentry import capture_exception


[% raw %]
@app.route("/", methods=["GET"])
def health_check():
    """
    Get server status health.

    The purpose of this API is to help other people/machines know liveness of the application.
    """
    return jsonify(
        status="ok",
        response={"message": "Server is up."},
    )


@app.route("/predict/<lang>/<project_name>/", methods=["POST"])
def slu(lang, project_name):
    """
    Get SLU predictions.

    Produces a json response containing intents and entities.
    """
    if not isinstance(request.json, dict):
        jsonify({
            "message": "Invalid request.", 
            "cause": f"Post body should be a dictionary, received {type(request.json)}."
        }), 400

    if not const.ALTERNATIVES in request.json or const.TEXT in request.json:
        jsonify({
            "message": "Invalid request.", 
            "cause": f"Post body should have either of these keys: {const.TEXT}, {const.ALTERNATIVES}."
        }), 400

    try:
        utterance: List[List[Dict[str, Any]]] = request.json.get(const.ALTERNATIVES)
        context: str = request.json.get(const.CONTEXT)

        predict = predict_wrapper()

        if not utterance:
            utterance = [[{const.TRANSCRIPT: request.json.get(const.TEXT)}]]

        if not utterance:
            return {const.INTENTS: [attr.asdict(Intent(name=const.S_INTENT_ERROR, score=1))]}

        response = predict(utterance, context)

        return jsonify(status="ok", response=response)
    except Exception as exc:
        # Update this section to: 
        # 1. Handle specific errors
        # 2. provide user-friendly messages. The current is developer friendly.
        capture_exception(index_error, ctx="api", message=request.json)
        jsonify({"message": str(e), "cause": traceback.format_exc()}), 500


if __name__ == "__main__":
    app.run(host="0.0.0.0")

[% endraw %]
